#include "./orderbook/include/avl.hpp"
#include <iostream>

int main() {
  Orderbook::Algorithms::Avl<int> avl;
  // right rotate test
  // avl.insert(10);
  // avl.insert(15);
  // avl.insert(5);
  // avl.insert(7);
  // avl.insert(4);
  // avl.insert(3);
  //
  // expected output
  // left left
  // 6
  // 2 3 1 : parent-> 4
  // 2 15 1 : parent-> 10
  // 3 4 2 : parent-> 5 left->3
  // 2 7 1 : parent-> 10
  // 4 5 3 : left->4 right->10
  // 4 10 2 : parent-> 5 left->7 right->15

  // right rotate test
  // avl.insert(10);
  // avl.insert(9);
  // avl.insert(13);
  // avl.insert(12);
  // avl.insert(14);
  // avl.insert(16);
  // right right
  // 6
  // 2 16 1 : parent-> 14
  // 2 12 1 : parent-> 10
  // 4 13 3 : left->10 right->14
  // 3 14 2 : parent-> 13 right->16
  // 2 9 1 : parent-> 10
  // 4 10 2 : parent-> 13 left->9 right->12

  // left right case
  // avl.insert(20);
  // avl.insert(21);
  // avl.insert(10);
  // avl.insert(9);
  // avl.insert(12);
  // avl.insert(13);
  // avl.insert(11);
  //
  // left right
  // 7
  // use_count: 2 data: 11 height: 1
  // parent-> 10
  //
  // use_count: 2 data: 13 height: 1
  // parent-> 20
  //
  // use_count: 4 data: 12 height: 3
  // left->10 right->20
  //
  // use_count: 4 data: 20 height: 2
  // parent-> 12 left->13 right->21
  //
  // use_count: 2 data: 9 height: 1
  // parent-> 10
  //
  // use_count: 2 data: 21 height: 1
  // parent-> 20
  //
  // use_count: 4 data: 10 height: 2
  // parent-> 12 left->9 right->11

  // right left
  // avl.insert(9);
  // avl.insert(5);
  // avl.insert(10);
  // avl.insert(0);
  // avl.insert(6);
  // avl.insert(11);
  // avl.insert(-1);
  // avl.insert(1);
  // avl.insert(2);
  // avl.remove(10);

  // right left
  // 7
  // use_count: 2 data: 24 height: 1
  // parent-> 25
  //
  // use_count: 4 data: 22 height: 3
  // left->20 right->25
  //
  // use_count: 2 data: 26 height: 1
  // parent-> 25
  //
  // use_count: 4 data: 25 height: 2
  // parent-> 22 left->24 right->26
  //
  // use_count: 2 data: 21 height: 1
  // parent-> 20
  //
  // use_count: 2 data: 10 height: 1
  // parent-> 20
  //
  // use_count: 4 data: 20 height: 2
  // parent-> 22 left->10 right->21
  // avl.insert(6);
  // avl.insert(2);
  // avl.insert(9);
  // avl.insert(1);
  // avl.insert(4);
  // avl.insert(8);
  // avl.insert(15);
  // avl.insert(3);
  // avl.insert(5);
  // avl.insert(7);
  // avl.insert(13);
  // avl.insert(17);
  // avl.insert(18);
  // // avl.debug();
  // avl.remove(1);
  // avl.debug();
  // https://stackoverflow.com/questions/3955680/how-to-check-if-my-avl-tree-implementation-is-correct

  // avl.insert(5);
  // avl.insert(2);
  // avl.insert(8);
  // avl.insert(1);
  // avl.insert(3);
  // avl.insert(7);
  // avl.insert(10);
  // avl.insert(4);
  // avl.insert(6);
  // avl.insert(9);
  // avl.insert(11);
  // avl.insert(12);
  // avl.remove(1);

  avl.debug();

  return 0;
}
